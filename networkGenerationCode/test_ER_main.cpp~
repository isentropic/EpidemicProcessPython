#include <iostream>
#include <fstream>
#include <iomanip> 
#include <cmath>
#include <string>
#include <random>
#include <vector>


#include "Linked_list.hpp"

int N = 8e3;// = 5000; //Number of Nodes

float mu_con = 1;  //fraction intercommunity links
float p = mu_con;

//std::default_random_engine eng((std::random_device())());
//std::uniform_real_distribution<float> fdis(0, 1);


void print_vector(std::vector<int> the_vector){
	std::cout<<"_______________\n";
	for (int j = 0; j<the_vector.size(); j++){
		std::cout<<the_vector[j]<< "\n";
	}
	std::cout<<"_______________\n";
}

int sum_vector(std::vector<int> the_vector){
	int sum = 0;
	for (int j = 0; j<the_vector.size(); j++){
		sum = sum + the_vector[j];
	}
	return sum;
}



int main(int argc, const char * argv[]) {
  ////////**INPUT PARAMETER DECLARATION///////////
  //id_of_process = argv[1];
  N = atoi(argv[1]);
  p = atof(argv[2]);
  //N = atoi(argv[4]);
  ////////////////////////////////////////////////

  std::vector<Linked_list*> nodes(N);
  std::cout<<"Nodes[N] "<<N<<"initialized\n";
  for(int i = 0; i<N; i++){
    nodes[i] = new Linked_list(i+1, false);
  }

  srand((unsigned)time(NULL));
  //nodes[nodes_b4community+i]->add_Node(nodes_b4community+k+1); 

  int progress = 0;
  bool updated = true;
  std::cout<<"\n";
  //std::cout<<std::fixed<<std::setprecision(2);
  for(int i = 0; i<N; i++){
    for(int j = i+1; j<N; j++){
      if (float(i)/N*100>progress){
	std::cout<<progress<<"\n";
	progress++;
      }

      //if( p >fdis(eng) ){
      if( p >  ((double)rand()/(double)RAND_MAX)  ){
	int k = 5;//links[i][j] = true;
      }
      
    }
    updated = false;
  }
  
  std::cout<<"Matrix filled\n";

  for(int i = 0; i<N; i++){
    for (int j = i+1; j<N; j++){
      //if(links[i][j] == true){
      nodes[i]->add_Node(j+1);
	nodes[j]->add_Node(i+1);
	nodes[i]->connectivity++;
	nodes[j]->connectivity++;
	//}
    }
  }
  //NETWORK FORMED




  //FILE OUTPUT

  //degree distribution
  std::ofstream degree_distr("degree_distr_ER.txt");
  for (int i=0; i<N; i++){
    degree_distr<<i<<"\t"<<nodes[i]->connectivity<<"\n";

  }

  ///
  std::ofstream total_graph("total_graph.txt");
  //total_graph<<"#node\tneighbors ... \tNodes: "<<N<<"\n";
  std::vector<int> temp_nodes;
  for (int i = 0; i<N; i++){
    temp_nodes = nodes[i]->containing_nodes();
    total_graph<<i+1;
    for(int j = 0; j<temp_nodes.size();j++){
      total_graph<<"\t"<<temp_nodes[j];
    }
    total_graph<<"\n";
    temp_nodes.clear();
  }

  std::cout<<"Success!\n";
	return 0; 
}
